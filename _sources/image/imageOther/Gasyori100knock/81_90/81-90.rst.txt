81-90
=============================

Hessianのコーナー検出
------------------------

コーナー検出とはエッジにおける角の点を検出することである。

コーナーは曲率が大きくなる点であり、次式のガウス曲率において、

.. code-block:: python

    ガウス曲率 K = det(H) / (1 + Ix^2 + Iy^2)^2

    det(H) = Ixx Iyy - IxIy^2
    H ... ヘシアン行列。画像の二次微分(グレースケール画像などに対して、Sobelフィルタを掛けて求められる)。画像上の一点に対して、次式で定義される。
    Ix ... x方向のsobelフィルタを掛けたもの。 Iy ... y方向のsobelフィルタ
    H = [ Ix^2  IxIy]
          IxIy  Iy^2

ヘシアンのコーナー検出では、det(H)が極大点をコーナーとみなす。
極大点は注目画素と8近傍を比較して、注目画素の値が最大であれば極大点として扱う。

解答ではdet(H)が極大点かつ、max(H)*0.1以上である点をコーナーとしている。

.. toctree::
   code/answer_81

Harrisのコーナー検出
------------------------

Harrisのコーナー検出のアルゴリズムは、

1. 画像をグレースケール化。

2. Sobelフィルタにより、ヘシアン行列を求める。

.. code-block:: python
    H = [ Ix^2  IxIy]
          IxIy  Iy^2
3. Ix^2, Iy^2, IxIyにそれぞれガウシアンフィルターをかける。

4. 各ピクセル毎に、R = det(H) - k (trace(H))^2 を計算する。 (kは実験的に0.04 - 0.16らへんが良いとされる)

5. R >= max(R) * th を満たすピクセルがコーナーとなる。  (thは0.1となることが多い)

- ガウシアンフィルター(k=3, sigma=3)
- k = 0.04, th = 0.1


.. toctree::
   code/answer_82

.. toctree::
   code/answer_83

.. toctree::
   code/answer_84

.. toctree::
   code/answer_85

.. toctree::
   code/answer_86

.. toctree::
   code/answer_87

.. toctree::
   code/answer_88

K-means (Step.2) クラスタリング
-----------------------------------

ここではアルゴリズム4-5も実装して、クラスタリング

ここで予測クラスが0,1となっているが、Q.85-87と違いラベルの順番はバラバラ
なので、K-meansはあくまでカテゴリ別に分類する手法であり、それが具体的に何のクラスかまでは分からない。
また、クラス数は予めこちらが知って置かなければいけない。

**K-meansクラスタリングでは最初に割り当てるラベルの状態によって、最後の出力が大きく左右される**ので注意が必要
また、データ数が少ないと失敗しやすい。これはデータ数が少ないことで、真のデータの分布をサンプリングしにくいことが原因である。
つまり、データ数が多いほどデータの分布が精度良くえられることによる。


.. toctree::
   code/answer_89

K-means (Step.3) 初期ラベルの変更
-----------------------------------

K-meansを用いて*train_@@@.jpg*の8枚をクラスタリング

ここでは、np.random.seed()の値やラベルを割り当てる閾値 np.random.random() < thのthを変更して、K-meansでクラスを完璧に予測せよ。
*train_@@@.jpg*はQ.89より画像数が２倍になっているので、クラスタリングしやすくなっている。

.. toctree::
   code/answer_90
