noise
========

.. toctree::
   :maxdepth: 2
   :glob:

   */*


ホワイトノイズ (White Noise)
------------------------------

UnityEngine.Random で⽣成する乱数

標準の UnityEngine.Randomで⽣成した点は、密度が濃いところがあったり、まばらなところがあったりと、偏りが発⽣


これは、標準の UnityEngine.Random を使って得られる乱数列がホワイトノイズを⽣成するため

ホワイトノイズの性質上、⼀様な乱数ではあるけども、点同⼠の距離が近くてもお構いなしに点を次々に⽣成


ハルトン数列 (Halton Sequence)
------------------------------------

偏りが出ない疑似乱数としてハルトン数列というものがある

まず、底を 2 とした場合、⾃然数 n (1...) を 2 進数で表現します。

例えば、n = 2 とすると、その2進数表記は 10 です。

次に得られた 2 進数 10 をビット反転して、⼩数部として扱います。

結果、2 進数表記で 0.01 という数が得られます。これは 10 進数で 1/4を意味します。

つまり、n = 2 におけるハルトン数列の値は 1/4 となります。

では、早速 n (1...9) までの数列を書き出してみましょう。(表 7.1)

▼表 7.1 底 2 のハルトン数列

n 2 進数 反転 結果

1 1 0.1 1/2

2 10 0.01 1/4

3 11 0.11 3/4

4 100 0.001 1/8

5 101 0.101 5/8

6 110 0.011 3/8

7 111 0.111 7/8

8 1000 0.0001 1/16

9 1001 0.1001 9/16

結果をみてみると、n が⼀つ増えるたびに、それ以前の結果同⼠でもっとも広い点間の
半分の位置に値が得られることがわかります。ちなみに、底が 2 のハルトン数列は、ビット演算
を使って求められるので、コンピュータの処理と親和性が⾼く、⾼速に計算することができます。

しかし、x 軸、y 軸に同じ底 2 の数列を使うと望ましい結果にはなりません

(y = x 直線上にのみプロットされてしまいます)。

そこで、底が 3 のハルトン数列も計算してみましょう。

3 進数を⽤いて、先ほどと同様に計算していくだけで求められます。(表 7.2)

では、x 軸に底が 2 のハルトン数列、y 軸に底が 3 のハルトン数列を使って n(1...1000)

までの点を実際にプロットしてみましょう。

ブルーノイズ (Blue Noise)
---------------------------------

⾼い周波数になるにつれ強くなる周波数特性をもつノイズのことをブルーノイズと呼ぶ。

ブルーノイズを使うと点間の距離をなるべく広くとるようにプロットすることができます。

ランダムな点の候補を複数作り、その中で他点からの距離が最も遠いものを⼀つ選択する、
というアルゴリズムで実装してみました。

計算に多の時間
がかかるので、実際ブルーノイズを使うには、事前に計算済みのデータを作っておく必要
がありそうです。

